version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sgate-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: sgate_production
      POSTGRES_USER: sgate_prod
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgresql/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./infra/postgresql/pg_hba.conf:/etc/postgresql/pg_hba.conf
    ports:
      - "5432:5432"
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sgate_prod -d sgate_production"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sgate-network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: sgate-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sgate-network

  # API Service
  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile.production
      args:
        NODE_ENV: production
    container_name: sgate-api-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    env_file:
      - ./apps/api/.env.production
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - api_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - sgate-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Checkout Frontend
  checkout:
    build:
      context: .
      dockerfile: ./apps/checkout/Dockerfile.production
      args:
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: https://api.sgate.com
    container_name: sgate-checkout-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.sgate.com
    ports:
      - "3000:3000"
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgate-network

  # Dashboard Frontend
  dashboard:
    build:
      context: .
      dockerfile: ./apps/dashboard/Dockerfile.production
      args:
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: https://api.sgate.com
    container_name: sgate-dashboard-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.sgate.com
    ports:
      - "3001:3001"
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgate-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sgate-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./infra/ssl:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - checkout
      - dashboard
    networks:
      - sgate-network

  # Log aggregator
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: sgate-fluentd-prod
    restart: unless-stopped
    volumes:
      - ./infra/fluentd:/fluentd/etc:ro
      - api_logs:/var/log/api:ro
      - nginx_logs:/var/log/nginx:ro
    networks:
      - sgate-network

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sgate-prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - sgate-network

  grafana:
    image: grafana/grafana:latest
    container_name: sgate-grafana-prod
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infra/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - sgate-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sgate-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16