version: '3.8'

services:
  # PostgreSQL Database with optimized configuration
  postgres:
    image: postgres:15-alpine
    container_name: sgate-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: sgate_production
      POSTGRES_USER: sgate_prod
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-local=trust --auth-host=md5"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgresql/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./infra/postgresql/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - postgres_logs:/var/log/postgresql
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    ports:
      - "9020:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sgate_prod -d sgate_production"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - sgate-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: sgate-redis-prod
    restart: unless-stopped
    command: |
      sh -c '
      mkdir -p /usr/local/etc/redis &&
      echo "
      # Redis Production Configuration
      bind 0.0.0.0
      port 6379
      requirepass $$REDIS_PASSWORD
      
      # Memory management
      maxmemory 1gb
      maxmemory-policy allkeys-lru
      
      # Persistence
      save 900 1
      save 300 10
      save 60 10000
      
      # Logging
      loglevel notice
      
      # Security
      protected-mode yes
      
      # Performance
      tcp-keepalive 300
      timeout 0
      tcp-backlog 511
      
      # Slow log
      slowlog-log-slower-than 10000
      slowlog-max-len 128
      " > /usr/local/etc/redis/redis.conf &&
      redis-server /usr/local/etc/redis/redis.conf
      '
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
    ports:
      - "9021:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - sgate-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # API Service with multiple replicas
  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile.production
      target: runtime
    image: sgate/api:${VERSION:-latest}
    container_name: sgate-api-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://sgate_prod:${DB_PASSWORD}@postgres:5432/sgate_production
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      API_KEY_SALT: ${API_KEY_SALT}
      WEBHOOK_SIGNATURE_SALT: ${WEBHOOK_SIGNATURE_SALT}
      JWT_SECRET: ${JWT_SECRET}
      SENTRY_DSN: ${SENTRY_DSN}
      RATE_LIMIT_ENABLED: "true"
      ENABLE_METRICS: "true"
      CORS_ORIGIN: ${CORS_ORIGIN}
      TRUST_PROXY: "1"
    env_file:
      - ./apps/api/.env.production
    ports:
      - "9022:4000"
      - "9023:9090"  # Metrics port
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - api_logs:/app/logs
      - api_tmp:/app/tmp
    healthcheck:
      test: ["CMD", "node", "/app/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - sgate-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Checkout Frontend
  checkout:
    build:
      context: .
      dockerfile: ./apps/checkout/Dockerfile.production
      args:
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: ${API_BASE_URL}
    image: sgate/checkout:${VERSION:-latest}
    container_name: sgate-checkout-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${API_BASE_URL}
    ports:
      - "9024:3000"
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgate-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Nginx Reverse Proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: sgate-nginx-prod
    restart: unless-stopped
    ports:
      - "9025:80"
      - "9026:443"
    volumes:
      - ./infra/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./infra/ssl:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - checkout
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgate-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: sgate-prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9027:9090"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./infra/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - sgate-network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: sgate-grafana-prod
    restart: unless-stopped
    ports:
      - "9028:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_ROOT_URL: https://monitoring.sgate.com
      GF_SMTP_ENABLED: "true"
      GF_SMTP_HOST: ${SMTP_HOST}
      GF_SMTP_USER: ${SMTP_USER}
      GF_SMTP_PASSWORD: ${SMTP_PASSWORD}
      GF_SMTP_FROM_ADDRESS: monitoring@sgate.com
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infra/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - sgate-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Log aggregation with Fluentd
  fluentd:
    build:
      context: ./infra/fluentd
      dockerfile: Dockerfile
    image: sgate/fluentd:${VERSION:-latest}
    container_name: sgate-fluentd-prod
    restart: unless-stopped
    volumes:
      - ./infra/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - api_logs:/var/log/api:ro
      - nginx_logs:/var/log/nginx:ro
      - postgres_logs:/var/log/postgres:ro
      - redis_logs:/var/log/redis:ro
    ports:
      - "9029:24224"
      - "9029:24224/udp"
    networks:
      - sgate-network
    environment:
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST}
      ELASTICSEARCH_PORT: ${ELASTICSEARCH_PORT}
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: sgate-backup-prod
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - sgate-network
    depends_on:
      - postgres
    profiles:
      - backup
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

volumes:
  postgres_data:
    driver: local
  postgres_logs:
    driver: local
  postgres_backups:
    driver: local
  redis_data:
    driver: local
  redis_logs:
    driver: local
  api_logs:
    driver: local
  api_tmp:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sgate-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: sgate-br0
      com.docker.network.driver.mtu: 1500

# Production deployment commands:
# 1. docker-compose -f docker-compose.production.yml pull
# 2. docker-compose -f docker-compose.production.yml up -d
# 3. docker-compose -f docker-compose.production.yml logs -f api
# 4. docker-compose -f docker-compose.production.yml exec api npm run migration:run